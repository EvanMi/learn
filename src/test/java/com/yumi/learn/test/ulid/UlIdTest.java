package com.yumi.learn.test.ulid;

import com.github.f4b6a3.ulid.Ulid;
import com.github.f4b6a3.ulid.UlidCreator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * (7 UlId)
 * */
public class UlIdTest {

	private final Logger logger = LoggerFactory.getLogger(UlIdTest.class);

	/**
	 * ULID is a 128-bit identifier. <br/>
	 * The first 48 bits represent the number of milliseconds since Unix Epoch,
	 * 1970-01-01. <br/>
	 * The remaining 80 bits are generated by a secure random number generator. <br/>
	 * Its canonical string representation is 26 characters long. <br/>
	 */
	@Test
	void testExample() {
		var ulid = UlidCreator.getUlid();
		var strUlid = ulid.toString();
		var ulid1 = Ulid.from(strUlid);
		Assertions.assertEquals(ulid, ulid1);

	}

	/**
	 * Monotonic ULID is a variant of ULID. <br/>
	 * The random component is incremented by 1 whenever the current millisecond equals
	 * the previous millisecond. <br/>
	 * Its main advantage is speed. <br/>
	 */
	@Test
	void testMonotonicUlid() {
		// 同一毫秒内选择选择自增，所以速度快
		for (int i = 0; i < 100; i++) {
			var ulid = UlidCreator.getMonotonicUlid();
			logger.info("ulid: {}", ulid);
		}
	}

	/**
	 * Hash ULID is a "non-standard" variant of ULID. <br/>
	 * It always returns the same ULID for a specific pair of arguments. <br/>
	 * It has the same basic structure as a ULID, except that the random component <br/>
	 * is replaced with the first 10 bytes of an SHA-256 hash.
	 */
	@Test
	void testHashUlid() {
		var ulid = UlidCreator.getHashUlid(System.currentTimeMillis(), "1234567890");
		logger.info("hash-ulid: {}", ulid);
	}

	/**
	 * It employs ThreadLocalRandom which works very well, <br/>
	 * although not cryptographically strong. It can be useful, <br/>
	 * for example, for logging.
	 */
	@Test
	void testFastUlid() {
		var ulid = Ulid.fast().toLowerCase();
		logger.info("fast-ulid: {}", ulid);
	}

}
